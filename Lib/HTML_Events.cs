/* This file ist generated by the program DSLMethodsGenerator. DO NOT EDIT IT MANUALLY! */

using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Web;
using System;

namespace BlazorDSL {
    static partial class Html {
        public static Attribute onFocus(object sender, Action<FocusEventArgs> callback)
            => new Attribute(
                "onfocus",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onBlur(object sender, Action<FocusEventArgs> callback)
            => new Attribute(
                "onblur",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onFocusIn(object sender, Action<FocusEventArgs> callback)
            => new Attribute(
                "onfocusin",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onFocusOut(object sender, Action<FocusEventArgs> callback)
            => new Attribute(
                "onfocusout",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onMouseOver(object sender, Action<MouseEventArgs> callback)
            => new Attribute(
                "onmouseover",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onMouseOut(object sender, Action<MouseEventArgs> callback)
            => new Attribute(
                "onmouseout",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onMouseMove(object sender, Action<MouseEventArgs> callback)
            => new Attribute(
                "onmousemove",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onMouseDown(object sender, Action<MouseEventArgs> callback)
            => new Attribute(
                "onmousedown",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onMouseUp(object sender, Action<MouseEventArgs> callback)
            => new Attribute(
                "onmouseup",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onClick(object sender, Action<MouseEventArgs> callback)
            => new Attribute(
                "onclick",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onDblClick(object sender, Action<MouseEventArgs> callback)
            => new Attribute(
                "ondblclick",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onWheel(object sender, Action<WheelEventArgs> callback)
            => new Attribute(
                "onwheel",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onMouseWheel(object sender, Action<WheelEventArgs> callback)
            => new Attribute(
                "onmousewheel",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onContextMenu(object sender, Action<MouseEventArgs> callback)
            => new Attribute(
                "oncontextmenu",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onDrag(object sender, Action<DragEventArgs> callback)
            => new Attribute(
                "ondrag",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onDragEnd(object sender, Action<DragEventArgs> callback)
            => new Attribute(
                "ondragend",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onDragEnter(object sender, Action<DragEventArgs> callback)
            => new Attribute(
                "ondragenter",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onDragLeave(object sender, Action<DragEventArgs> callback)
            => new Attribute(
                "ondragleave",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onDragOver(object sender, Action<DragEventArgs> callback)
            => new Attribute(
                "ondragover",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onDragStart(object sender, Action<DragEventArgs> callback)
            => new Attribute(
                "ondragstart",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onDrop(object sender, Action<DragEventArgs> callback)
            => new Attribute(
                "ondrop",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onKeyDown(object sender, Action<KeyboardEventArgs> callback)
            => new Attribute(
                "onkeydown",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onKeyUp(object sender, Action<KeyboardEventArgs> callback)
            => new Attribute(
                "onkeyup",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onKeyPress(object sender, Action<KeyboardEventArgs> callback)
            => new Attribute(
                "onkeypress",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onChange(object sender, Action<ChangeEventArgs> callback)
            => new Attribute(
                "onchange",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onInput(object sender, Action<ChangeEventArgs> callback)
            => new Attribute(
                "oninput",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onInvalid(object sender, Action<EventArgs> callback)
            => new Attribute(
                "oninvalid",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onReset(object sender, Action<EventArgs> callback)
            => new Attribute(
                "onreset",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onSelect(object sender, Action<EventArgs> callback)
            => new Attribute(
                "onselect",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onSelectStart(object sender, Action<EventArgs> callback)
            => new Attribute(
                "onselectstart",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onSelectionChange(object sender, Action<EventArgs> callback)
            => new Attribute(
                "onselectionchange",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onSubmit(object sender, Action<EventArgs> callback)
            => new Attribute(
                "onsubmit",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onBeforeCopy(object sender, Action<EventArgs> callback)
            => new Attribute(
                "onbeforecopy",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onBeforeCut(object sender, Action<EventArgs> callback)
            => new Attribute(
                "onbeforecut",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onBeforePaste(object sender, Action<EventArgs> callback)
            => new Attribute(
                "onbeforepaste",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onTouchCancel(object sender, Action<TouchEventArgs> callback)
            => new Attribute(
                "ontouchcancel",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onTouchEnd(object sender, Action<TouchEventArgs> callback)
            => new Attribute(
                "ontouchend",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onTouchMove(object sender, Action<TouchEventArgs> callback)
            => new Attribute(
                "ontouchmove",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onTouchStart(object sender, Action<TouchEventArgs> callback)
            => new Attribute(
                "ontouchstart",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onTouchEnter(object sender, Action<TouchEventArgs> callback)
            => new Attribute(
                "ontouchenter",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onTouchLeave(object sender, Action<TouchEventArgs> callback)
            => new Attribute(
                "ontouchleave",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onGotPointerCapture(object sender, Action<PointerEventArgs> callback)
            => new Attribute(
                "ongotpointercapture",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onLostPointerCapture(object sender, Action<PointerEventArgs> callback)
            => new Attribute(
                "onlostpointercapture",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onPointerCancel(object sender, Action<PointerEventArgs> callback)
            => new Attribute(
                "onpointercancel",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onPointerDown(object sender, Action<PointerEventArgs> callback)
            => new Attribute(
                "onpointerdown",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onPointerEnter(object sender, Action<PointerEventArgs> callback)
            => new Attribute(
                "onpointerenter",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onPointerLeave(object sender, Action<PointerEventArgs> callback)
            => new Attribute(
                "onpointerleave",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onPointerMove(object sender, Action<PointerEventArgs> callback)
            => new Attribute(
                "onpointermove",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onPointerOut(object sender, Action<PointerEventArgs> callback)
            => new Attribute(
                "onpointerout",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onPointerOver(object sender, Action<PointerEventArgs> callback)
            => new Attribute(
                "onpointerover",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onPointerUp(object sender, Action<PointerEventArgs> callback)
            => new Attribute(
                "onpointerup",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onCanPlay(object sender, Action<EventArgs> callback)
            => new Attribute(
                "oncanplay",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onCanPlayThrough(object sender, Action<EventArgs> callback)
            => new Attribute(
                "oncanplaythrough",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onCueChange(object sender, Action<EventArgs> callback)
            => new Attribute(
                "oncuechange",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onDurationChange(object sender, Action<EventArgs> callback)
            => new Attribute(
                "ondurationchange",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onEmptied(object sender, Action<EventArgs> callback)
            => new Attribute(
                "onemptied",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onPause(object sender, Action<EventArgs> callback)
            => new Attribute(
                "onpause",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onPlay(object sender, Action<EventArgs> callback)
            => new Attribute(
                "onplay",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onPlaying(object sender, Action<EventArgs> callback)
            => new Attribute(
                "onplaying",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onRateChange(object sender, Action<EventArgs> callback)
            => new Attribute(
                "onratechange",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onSeeked(object sender, Action<EventArgs> callback)
            => new Attribute(
                "onseeked",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onSeeking(object sender, Action<EventArgs> callback)
            => new Attribute(
                "onseeking",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onStalled(object sender, Action<EventArgs> callback)
            => new Attribute(
                "onstalled",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onStop(object sender, Action<EventArgs> callback)
            => new Attribute(
                "onstop",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onSuspend(object sender, Action<EventArgs> callback)
            => new Attribute(
                "onsuspend",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onTimeUpdate(object sender, Action<EventArgs> callback)
            => new Attribute(
                "ontimeupdate",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onVolumeChange(object sender, Action<EventArgs> callback)
            => new Attribute(
                "onvolumechange",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onWaiting(object sender, Action<EventArgs> callback)
            => new Attribute(
                "onwaiting",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onLoadStart(object sender, Action<ProgressEventArgs> callback)
            => new Attribute(
                "onloadstart",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onTimeout(object sender, Action<ProgressEventArgs> callback)
            => new Attribute(
                "ontimeout",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onAbort(object sender, Action<ProgressEventArgs> callback)
            => new Attribute(
                "onabort",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onLoad(object sender, Action<ProgressEventArgs> callback)
            => new Attribute(
                "onload",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onLoadend(object sender, Action<ProgressEventArgs> callback)
            => new Attribute(
                "onloadend",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onProgress(object sender, Action<ProgressEventArgs> callback)
            => new Attribute(
                "onprogress",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onError(object sender, Action<ErrorEventArgs> callback)
            => new Attribute(
                "onerror",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onActivate(object sender, Action<EventArgs> callback)
            => new Attribute(
                "onactivate",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onBeforeAtivate(object sender, Action<EventArgs> callback)
            => new Attribute(
                "onbeforeactivate",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onBeforeDeactivate(object sender, Action<EventArgs> callback)
            => new Attribute(
                "onbeforedeactivate",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onDeactivate(object sender, Action<EventArgs> callback)
            => new Attribute(
                "ondeactivate",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onEnded(object sender, Action<EventArgs> callback)
            => new Attribute(
                "onended",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onFullScreenChange(object sender, Action<EventArgs> callback)
            => new Attribute(
                "onfullscreenchange",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onFullScreenError(object sender, Action<EventArgs> callback)
            => new Attribute(
                "onfullscreenerror",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onLoadedData(object sender, Action<EventArgs> callback)
            => new Attribute(
                "onloadeddata",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onLoadedMetadata(object sender, Action<EventArgs> callback)
            => new Attribute(
                "onloadedmetadata",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onPointerLockChange(object sender, Action<EventArgs> callback)
            => new Attribute(
                "onpointerlockchange",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onPointerLockError(object sender, Action<EventArgs> callback)
            => new Attribute(
                "onpointerlockerror",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onReadyStateChange(object sender, Action<EventArgs> callback)
            => new Attribute(
                "onreadystatechange",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onScroll(object sender, Action<EventArgs> callback)
            => new Attribute(
                "onscroll",
                EventCallback.Factory.Create(sender, callback)
            );

        public static Attribute onToggle(object sender, Action<EventArgs> callback)
            => new Attribute(
                "ontoggle",
                EventCallback.Factory.Create(sender, callback)
            );
    }
}
