using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace DSLMethodsGenerator {
    partial class Program {
        /// <summary>
        /// Generates Methods for HTML tags
        /// </summary>
        private static void GenerateTagMethods() {
            var allTags = FilterLines(File.ReadAllLines("HTML Tags.txt"));
            var voidTags = FilterLines(File.ReadAllLines("HTML Void Elements.txt"));
            var reservedCSharpKeywords = FilterLines(File.ReadAllLines("CSharpReservedKeywords.txt"));
            var tagsWithText = FilterLines(File.ReadAllLines("HTML Tags with text.txt"));

            var tags =
                from tag in allTags
                let isVoidTag = voidTags.Contains(tag)
                let isReservedKeyword = reservedCSharpKeywords.Contains(tag)
                let withText = tagsWithText.Contains(tag)

                select (tag: tag, isVoidTag: isVoidTag, isReservedKeyword: isReservedKeyword, withText: withText);

            var source = @"/* This file ist generated by the program DSLMethodsGenerator. DO NOT EDIT IT MANUALLY! */

using System.Collections.Generic;
using System.Linq;

namespace BlazorDSL {
    public static partial class Html {
        " +
        string.Join(Environment.NewLine, tags.SelectMany(tag => BuildTagMethods(tag.tag, tag.isVoidTag, tag.isReservedKeyword, tag.withText))) +
        @"
    }
}
";
            File.WriteAllText(@"..\..\..\..\Lib\HTML_Tags.cs", source);
        }

        private static IEnumerable<string> BuildTagMethods(string tag, bool isVoidElement, bool isReservedKeyword, bool withText) {
            var methodName = isReservedKeyword
                ? "@" + tag
                : tag;

            if (!isVoidElement)
                yield return @$"
        public static Node {methodName}(Attribute[] attributes, params Node[] inner)
            => new TagNode(""{tag}"", attributes, inner);";

            if (!isVoidElement)
                yield return $@"
        public static Node {methodName}(params Node[] inner)
            => new TagNode(""{tag}"", inner);";

            if (!isVoidElement)
                yield return $@"
        public static Node {methodName}(IEnumerable<Node> inner)
            => new TagNode(""{tag}"", inner.ToArray());";

            if (isVoidElement)
                yield return @$"
        public static Node {methodName}(Attribute[] attributes)
            => new TagNode(""{tag}"", attributes);";

            if (!isVoidElement && withText)
                yield return $@"
        public static Node {methodName}(Attribute[] attributes, string text)
            => new TagNode(""{tag}"", attributes, Html.text(text));";

            if (!isVoidElement && withText)
                yield return $@"
        public static Node {methodName}(string text)
            => new TagNode(""{tag}"", Html.text(text));";
        }
    }
}