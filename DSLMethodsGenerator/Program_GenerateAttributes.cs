using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace DSLMethodsGenerator {
    partial class Program {
        /// <summary>
        /// Generates the Methods for the Attributes
        /// </summary>
        private static void GenerateAttributeMethods() {
            var allAttributes = FilterLines(File.ReadAllLines("HTML Attributes.txt"));
            var reservedCSharpKeywords = FilterLines(File.ReadAllLines("CSharpReservedKeywords.txt"));

            var customAttributeMethodNames = (
                from line in File.ReadLines("Custom Attribute Method Names.txt")
                where !line.Trim().StartsWith("#")
                let parts = line.Trim().Split("\t")
                select (method: parts[0], attribute: parts[1])
            ).ToDictionary(x => x.attribute, x => x.method);

            var attributes =
                from attribute in allAttributes
                let isReservedKeyword = reservedCSharpKeywords.Contains(attribute)
                select (attribute: attribute, isReservedKeyword: isReservedKeyword);

            var source = @"/* This file ist generated by the program DSLMethodsGenerator. DO NOT EDIT IT MANUALLY! */

namespace BlazorDSL {
    public static partial class Html {
        " +
        string.Join(Environment.NewLine, attributes.Select(x => BuilAttributeMethod(x.attribute, x.isReservedKeyword, customAttributeMethodNames))) +
        @"
    }
}
";

            File.WriteAllText(@"..\..\..\..\Lib\HTML_Attributes.cs", source);
        }

        static string BuilAttributeMethod(string attribute, bool isReservedKeyword, Dictionary<string, string> customMethodNames) {
            var methodName =
                customMethodNames.ContainsKey(attribute)
                ? customMethodNames[attribute]
                : isReservedKeyword
                    ? "@" + attribute
                    : attribute;

            return @$"
            public static Attribute {methodName}(string value)
                => new Attribute(""{attribute}"", value);";
        }
    }
}
